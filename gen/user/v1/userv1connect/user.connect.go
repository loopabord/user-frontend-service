// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: user/v1/user.proto

package userv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "userfrontendservice/gen/user/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserFrontendServiceName is the fully-qualified name of the UserFrontendService service.
	UserFrontendServiceName = "user.v1.UserFrontendService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserFrontendServiceCreateUserProcedure is the fully-qualified name of the UserFrontendService's
	// CreateUser RPC.
	UserFrontendServiceCreateUserProcedure = "/user.v1.UserFrontendService/CreateUser"
	// UserFrontendServiceReadUserProcedure is the fully-qualified name of the UserFrontendService's
	// ReadUser RPC.
	UserFrontendServiceReadUserProcedure = "/user.v1.UserFrontendService/ReadUser"
	// UserFrontendServiceReadAllUsersProcedure is the fully-qualified name of the UserFrontendService's
	// ReadAllUsers RPC.
	UserFrontendServiceReadAllUsersProcedure = "/user.v1.UserFrontendService/ReadAllUsers"
	// UserFrontendServiceUpdateUserProcedure is the fully-qualified name of the UserFrontendService's
	// UpdateUser RPC.
	UserFrontendServiceUpdateUserProcedure = "/user.v1.UserFrontendService/UpdateUser"
	// UserFrontendServiceDeleteUserProcedure is the fully-qualified name of the UserFrontendService's
	// DeleteUser RPC.
	UserFrontendServiceDeleteUserProcedure = "/user.v1.UserFrontendService/DeleteUser"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	userFrontendServiceServiceDescriptor            = v1.File_user_v1_user_proto.Services().ByName("UserFrontendService")
	userFrontendServiceCreateUserMethodDescriptor   = userFrontendServiceServiceDescriptor.Methods().ByName("CreateUser")
	userFrontendServiceReadUserMethodDescriptor     = userFrontendServiceServiceDescriptor.Methods().ByName("ReadUser")
	userFrontendServiceReadAllUsersMethodDescriptor = userFrontendServiceServiceDescriptor.Methods().ByName("ReadAllUsers")
	userFrontendServiceUpdateUserMethodDescriptor   = userFrontendServiceServiceDescriptor.Methods().ByName("UpdateUser")
	userFrontendServiceDeleteUserMethodDescriptor   = userFrontendServiceServiceDescriptor.Methods().ByName("DeleteUser")
)

// UserFrontendServiceClient is a client for the user.v1.UserFrontendService service.
type UserFrontendServiceClient interface {
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	ReadUser(context.Context, *connect.Request[v1.ReadUserRequest]) (*connect.Response[v1.ReadUserResponse], error)
	ReadAllUsers(context.Context, *connect.Request[v1.ReadAllUsersRequest]) (*connect.Response[v1.ReadAllUsersResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
}

// NewUserFrontendServiceClient constructs a client for the user.v1.UserFrontendService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserFrontendServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserFrontendServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userFrontendServiceClient{
		createUser: connect.NewClient[v1.CreateUserRequest, v1.CreateUserResponse](
			httpClient,
			baseURL+UserFrontendServiceCreateUserProcedure,
			connect.WithSchema(userFrontendServiceCreateUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		readUser: connect.NewClient[v1.ReadUserRequest, v1.ReadUserResponse](
			httpClient,
			baseURL+UserFrontendServiceReadUserProcedure,
			connect.WithSchema(userFrontendServiceReadUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		readAllUsers: connect.NewClient[v1.ReadAllUsersRequest, v1.ReadAllUsersResponse](
			httpClient,
			baseURL+UserFrontendServiceReadAllUsersProcedure,
			connect.WithSchema(userFrontendServiceReadAllUsersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v1.UpdateUserRequest, v1.UpdateUserResponse](
			httpClient,
			baseURL+UserFrontendServiceUpdateUserProcedure,
			connect.WithSchema(userFrontendServiceUpdateUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[v1.DeleteUserRequest, v1.DeleteUserResponse](
			httpClient,
			baseURL+UserFrontendServiceDeleteUserProcedure,
			connect.WithSchema(userFrontendServiceDeleteUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// userFrontendServiceClient implements UserFrontendServiceClient.
type userFrontendServiceClient struct {
	createUser   *connect.Client[v1.CreateUserRequest, v1.CreateUserResponse]
	readUser     *connect.Client[v1.ReadUserRequest, v1.ReadUserResponse]
	readAllUsers *connect.Client[v1.ReadAllUsersRequest, v1.ReadAllUsersResponse]
	updateUser   *connect.Client[v1.UpdateUserRequest, v1.UpdateUserResponse]
	deleteUser   *connect.Client[v1.DeleteUserRequest, v1.DeleteUserResponse]
}

// CreateUser calls user.v1.UserFrontendService.CreateUser.
func (c *userFrontendServiceClient) CreateUser(ctx context.Context, req *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// ReadUser calls user.v1.UserFrontendService.ReadUser.
func (c *userFrontendServiceClient) ReadUser(ctx context.Context, req *connect.Request[v1.ReadUserRequest]) (*connect.Response[v1.ReadUserResponse], error) {
	return c.readUser.CallUnary(ctx, req)
}

// ReadAllUsers calls user.v1.UserFrontendService.ReadAllUsers.
func (c *userFrontendServiceClient) ReadAllUsers(ctx context.Context, req *connect.Request[v1.ReadAllUsersRequest]) (*connect.Response[v1.ReadAllUsersResponse], error) {
	return c.readAllUsers.CallUnary(ctx, req)
}

// UpdateUser calls user.v1.UserFrontendService.UpdateUser.
func (c *userFrontendServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// DeleteUser calls user.v1.UserFrontendService.DeleteUser.
func (c *userFrontendServiceClient) DeleteUser(ctx context.Context, req *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// UserFrontendServiceHandler is an implementation of the user.v1.UserFrontendService service.
type UserFrontendServiceHandler interface {
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	ReadUser(context.Context, *connect.Request[v1.ReadUserRequest]) (*connect.Response[v1.ReadUserResponse], error)
	ReadAllUsers(context.Context, *connect.Request[v1.ReadAllUsersRequest]) (*connect.Response[v1.ReadAllUsersResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
}

// NewUserFrontendServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserFrontendServiceHandler(svc UserFrontendServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userFrontendServiceCreateUserHandler := connect.NewUnaryHandler(
		UserFrontendServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(userFrontendServiceCreateUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userFrontendServiceReadUserHandler := connect.NewUnaryHandler(
		UserFrontendServiceReadUserProcedure,
		svc.ReadUser,
		connect.WithSchema(userFrontendServiceReadUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userFrontendServiceReadAllUsersHandler := connect.NewUnaryHandler(
		UserFrontendServiceReadAllUsersProcedure,
		svc.ReadAllUsers,
		connect.WithSchema(userFrontendServiceReadAllUsersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userFrontendServiceUpdateUserHandler := connect.NewUnaryHandler(
		UserFrontendServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(userFrontendServiceUpdateUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userFrontendServiceDeleteUserHandler := connect.NewUnaryHandler(
		UserFrontendServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(userFrontendServiceDeleteUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/user.v1.UserFrontendService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserFrontendServiceCreateUserProcedure:
			userFrontendServiceCreateUserHandler.ServeHTTP(w, r)
		case UserFrontendServiceReadUserProcedure:
			userFrontendServiceReadUserHandler.ServeHTTP(w, r)
		case UserFrontendServiceReadAllUsersProcedure:
			userFrontendServiceReadAllUsersHandler.ServeHTTP(w, r)
		case UserFrontendServiceUpdateUserProcedure:
			userFrontendServiceUpdateUserHandler.ServeHTTP(w, r)
		case UserFrontendServiceDeleteUserProcedure:
			userFrontendServiceDeleteUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserFrontendServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserFrontendServiceHandler struct{}

func (UnimplementedUserFrontendServiceHandler) CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserFrontendService.CreateUser is not implemented"))
}

func (UnimplementedUserFrontendServiceHandler) ReadUser(context.Context, *connect.Request[v1.ReadUserRequest]) (*connect.Response[v1.ReadUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserFrontendService.ReadUser is not implemented"))
}

func (UnimplementedUserFrontendServiceHandler) ReadAllUsers(context.Context, *connect.Request[v1.ReadAllUsersRequest]) (*connect.Response[v1.ReadAllUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserFrontendService.ReadAllUsers is not implemented"))
}

func (UnimplementedUserFrontendServiceHandler) UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserFrontendService.UpdateUser is not implemented"))
}

func (UnimplementedUserFrontendServiceHandler) DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserFrontendService.DeleteUser is not implemented"))
}
